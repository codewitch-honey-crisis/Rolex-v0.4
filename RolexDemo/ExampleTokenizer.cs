//
//  This CSharp output file generated by Rolex
// Copyright (C) by codewitch honey crisis, 2020.
// Rolex uses the GPLEX engine
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by Rolex is the property of the user.
//
//  Rolex Version:  1.2.2
//  Machine:  DESKTOP-EC2OMEU
//  DateTime: 1/31/2020 10:17:37 AM
//  UserName: honey
//  Rolex input file <C:\Users\honey\source\repos\Rolex\RolexDemo\Example.rl - 1/30/2020 5:04:41 PM>
//  Rolex frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, embedbuffers
//  Fallback code page: Target machine default
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;


namespace RolexDemo
{
// Code copied from Rolex embedded resource
/// <summary>
/// Represents a single token
/// </summary>
internal struct Token
{
	/// <summary>
	/// Indicates the line where the token occurs
	/// </summary>
	public int Line;
	/// <summary>
	/// Indicates the column where the token occurs
	/// </summary>
	public int Column;
	/// <summary>
	/// Indicates the position where the token occurs
	/// </summary>
	public long Position;
	/// <summary>
	/// Indicates the symbol id or -1 for the error symbol
	/// </summary>
	public int SymbolId;
	/// <summary>
	/// Indicates the value of the token
	/// </summary>
	public string Value;
}
[Serializable]
internal class BufferException : Exception
{
    public BufferException() { }
    public BufferException(string message) : base(message) { }
    public BufferException(string message, Exception innerException)
        : base(message, innerException) { }
    protected BufferException(SerializationInfo info, StreamingContext context)
        : base(info, context) { }
}

internal abstract class ScanBuff
{
    public string FileName;

    public const int EndOfFile = -1;
    public const int UnicodeReplacementChar = 0xFFFD;

    public bool IsFile { get { return (FileName != null); } }
    
    public abstract int Pos { get; set; }
    public abstract int Read();
    public virtual void Mark() { }

    public abstract string GetString(int begin, int limit);

    public static ScanBuff GetBuffer(IEnumerator<char> source)
    {
        return new BuildBuffer(source);
    }
    public static ScanBuff GetBuffer(TextReader source)
    {
        return new BuildBuffer(source);
    }

    public static ScanBuff GetBuffer(Stream source)
    {
        return new BuildBuffer(source);
    }

    public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
    {
        return new BuildBuffer(source, fallbackCodePage);
    }
}

#region Buffer classes

// ==============================================================
// =====     class BuildBuff : for unicode text files    ========
// ==============================================================
// Double buffer for char stream.
internal class BufferElement
{
    StringBuilder bldr = new StringBuilder();
    StringBuilder next = new StringBuilder();
    int minIx;
    int maxIx;
    int brkIx;
    bool appendToNext;

    internal BufferElement() { }

    internal int MaxIndex { get { return maxIx; } }
    // internal int MinIndex { get { return minIx; } }

    internal char this[int index] {
        get {
            if (index < minIx || index >= maxIx)
                throw new BufferException("Index was outside data buffer");
            else if (index < brkIx)
                return bldr[index - minIx];
            else
                return next[index - brkIx];
        }
    }

    internal void Append(char[] block, int count)
    {
        maxIx += count;
        if (appendToNext)
            this.next.Append(block, 0, count);
        else
        {
            this.bldr.Append(block, 0, count);
            brkIx = maxIx;
            appendToNext = true;
        }
    }

    internal string GetString(int start, int limit)
    {
        if (limit <= start)
            return "";
        if (start >= minIx && limit <= maxIx)
            if (limit < brkIx) // String entirely in bldr builder
                return bldr.ToString(start - minIx, limit - start);
            else if (start >= brkIx) // String entirely in next builder
                return next.ToString(start - brkIx, limit - start);
            else // Must do a string-concatenation
                return
                    bldr.ToString(start - minIx, brkIx - start) +
                    next.ToString(0, limit - brkIx);
        else
            throw new BufferException("String was outside data buffer");
    }

    internal void Mark(int limit)
    {
        if (limit > brkIx + 16) // Rotate blocks
        {
            StringBuilder temp = bldr;
            bldr = next;
            next = temp;
            next.Length = 0;
            minIx = brkIx;
            brkIx = maxIx;
        }
    }
}


internal class BuildBuffer : ScanBuff
{
    TextReader _reader;
    Stream _stream;
    int _fallbackCodePage = -1;
    Encoding _encoding;
    IEnumerator<char> _enum;
    bool _first = true;
    BufferElement data = new BufferElement();

    int bPos;            // Postion index in the StringBuilder

    static int _Preamble(Stream stream)
    {
        int b0 = stream.ReadByte();
        int b1 = stream.ReadByte();

        if (b0 == 0xfe && b1 == 0xff)
            return 1201; // UTF16BE
        if (b0 == 0xff && b1 == 0xfe)
            return 1200; // UTF16LE

        int b2 = stream.ReadByte();
        if ((b0 == 0xef && b1 == 0xbb) && b2 == 0xbf)
            return 65001; // UTF8
                          //
                          // There is no unicode preamble, so we
                          // return denoter for the machine default.
                          //
        stream.Seek(0, SeekOrigin.Begin);
        return 0;
    }
    public int ReadNextBlk(char[] buffer, int index, int count)
    {

        if (null != _stream)
        {
            if (_first)
            {
                _first = false;

                int preamble = _Preamble(_stream);

                if (preamble != 0)  // There is a valid BOM here!
                    _encoding = Encoding.GetEncoding(preamble);
                else if (_fallbackCodePage == -1) // Fallback is "raw" bytes
                {
                    byte[] b = new byte[count];
                    int c = _stream.Read(b, 0, count);
                    int i = 0;
                    int j = index;
                    for (; i < c; ++i)
                    {
                        buffer[j] = (char)b[i];
                        ++j;
                    }
                    return c;
                }
                else if (_fallbackCodePage != -2) // Anything but "guess"
                    _encoding = Encoding.GetEncoding(_fallbackCodePage);
                else // This is the "guess" option
                {
                    int guess = new Guesser(_stream).GuessCodePage();
                    _stream.Seek(0, SeekOrigin.Begin);
                    if (guess == -1) // ==> this is a 7-bit file
                        _encoding = Encoding.ASCII;
                    else if (guess == 65001)
                        _encoding = Encoding.UTF8;
                    else             // ==> use the machine default
                        _encoding = Encoding.Default;
                }

            }
            StreamReader reader;
            if (null != _encoding)
                reader = new StreamReader(_stream, _encoding);
            else
                reader = new StreamReader(_stream);
            return reader.Read(buffer, index, count);
        }
        else if (null != _reader)
        {
            _first = false;
            return _reader.Read(buffer, index, count);
        }
        else if (null != _enum)
        {
            int i = count;
            count = 0;
            while (i > 0 && _enum.MoveNext())
            {
                buffer[index] = _enum.Current;
                ++index;
                ++count;
                --i;
            }
            return count;
        }
        // should never get here
        throw new NotImplementedException();
    }

    private string EncodingName {
        get {
            if (null != _encoding)
                return _encoding.BodyName;
            if (_stream != null)
                return "raw-bytes";
            if (null != _enum)
                return "UTF-16";
            else if (null != _reader)
            {
                try
                {
                    var sr = (StreamReader)_reader;
                    return sr.CurrentEncoding.BodyName;
                }
                catch (InvalidCastException) { }
            }
            return "UTF-16";
        }
    }

    public BuildBuffer(Stream stream)
    {
        try
        {
            FileStream fStrm = (FileStream)stream;
            FileName = fStrm.Name;
        }
        catch (InvalidCastException) { }
        _stream = stream;
        _fallbackCodePage = -1;
    }
    public BuildBuffer(IEnumerator<char> input)
    {
        FileName = null;
        _enum = input;
    }
    public BuildBuffer(TextReader reader)
    {
        try
        {
            var sr = (StreamReader)reader;
            if (null != sr)
            {
                FileStream fStrm = (FileStream)sr.BaseStream;
                FileName = fStrm.Name;
            }
        }
        catch (InvalidCastException) { }
        _reader = reader;
    }
    public BuildBuffer(Stream stream, int fallbackCodePage)
    {
        try
        {
            FileStream fStrm = (FileStream)stream;
            FileName = fStrm.Name;
        }
        catch (InvalidCastException) { }

        _stream = stream;
        _fallbackCodePage = fallbackCodePage;
    }

    /// <summary>
    /// Marks a conservative lower bound for the buffer,
    /// allowing space to be reclaimed.  If an application 
    /// needs to call GetString at arbitrary past locations 
    /// in the input stream, Mark() is not called.
    /// </summary>
    public override void Mark() { data.Mark(bPos - 2); }

    public override int Pos {
        get { return bPos; }
        set { bPos = value; }
    }


    /// <summary>
    /// Read returns the ordinal number of the next char, or 
    /// EOF (-1) for an end of stream.  Note that the next
    /// code point may require *two* calls of Read().
    /// </summary>
    /// <returns></returns>
    public override int Read()
    {
        //
        //  Characters at positions 
        //  [data.offset, data.offset + data.bldr.Length)
        //  are available in data.bldr.
        //
        if (bPos < data.MaxIndex)
        {
            // ch0 cannot be EOF
            int result = data[bPos];
            ++bPos;
            return result;
        }
        else // Read from underlying stream
        {
            // Experimental code, blocks of page size
            char[] chrs = new char[4096];
            int count = ReadNextBlk(chrs, 0, chrs.Length);
            if (count == 0)
                return EndOfFile;
            else
            {
                data.Append(chrs, count);
                int result = data[bPos];
                ++bPos;
                return result;
            }
        }
    }

    public override string GetString(int begin, int limit)
    {
        return data.GetString(begin, limit);
    }

    public override string ToString()
    {
        return "StringBuilder buffer, encoding: " + this.EncodingName;
    }
}

// =============== End ScanBuff-derived classes ==================

#endregion Buffer classes

// ==============================================================
// ============      class CodePageHandling         =============
// ==============================================================
internal class CodePageHandling
{
    public static int GetCodePage(string option)
    {
        string command = option.ToUpperInvariant();
        if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
            command = command.Substring(9);
        var opt = option;
        try
        {
            if (command.Equals("RAW"))
                return -1;
            else if (command.Equals("GUESS"))
                return -2;
            else if (command.Equals("DEFAULT"))
                return 0;
            else if (char.IsDigit(command[0]))
                return int.Parse(command, CultureInfo.InvariantCulture);
            else
            {
                Encoding enc = Encoding.GetEncoding(command);
                return enc.CodePage;
            }
        }
        
        catch (FormatException)
        {
            // deslanged won't resolve opt but okay because defaults to var
            Console.Error.WriteLine(string.Concat("Invalid format ",opt,", using machine default"));
        }
        catch (ArgumentException)
        {
            // deslanged won't resolve opt but okay because defaults to var
            Console.Error.WriteLine(
                string.Concat("Unknown code page ",opt,", using machine default"));
        }
        return 0;
    }
}
#region guesser
// ==============================================================
// ============          Encoding Guesser           =============
// ==============================================================

/// <summary>
/// This class provides a simple finite state automaton that
/// scans the file looking for (1) valid UTF-8 byte patterns,
/// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
/// The method then guesses whether it is UTF-8 or maybe some 
/// local machine default encoding.  This works well for the
/// various Latin encodings.
/// </summary>
internal class Guesser
{
    ScanBuff buffer;

    public int GuessCodePage() { return Scan(); }

    const int maxAccept = 10;
    const int initial = 0;
    const int eofNum = 0;
    const int goStart = -1;
    const int INITIAL = 0;
    const int EndToken = 0;

    #region user code
    /* 
     *  Reads the bytes of a file to determine if it is 
     *  UTF-8 or a single-byte code page file.
     */
    public long utfX;
    public long uppr;
    #endregion user code

    int state;
    int currentStart = startState[0];
    int code;

    #region ScannerTables
    static int[] startState = new int[] { 11, 0 };

    #region CharacterMap
    static sbyte[] map = new sbyte[] {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
    #endregion

    static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };
    [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
    // Reason for suppression: cannot have self-reference in array initializer.
    static Guesser()
    {
        nextState[7] = nextState[2];
        nextState[9] = nextState[2];
        nextState[10] = nextState[2];
    }

    int NextState()
    {
        if (code == ScanBuff.EndOfFile)
            return eofNum;
        else
            return nextState[state][map[code]];
    }
    #endregion

    public Guesser(System.IO.Stream file) { SetSource(file); }

    public void SetSource(System.IO.Stream source)
    {
        this.buffer = new BuildBuffer(source);
        code = buffer.Read();
    }

    int Scan()
    {
        while (true)
        {

            int next;
            state = currentStart;

            while ((next = NextState()) == goStart)
                code = buffer.Read();

            state = next;

            code = buffer.Read();

            while ((next = NextState()) > eofNum)
            {
                state = next;
                code = buffer.Read();
            }
            if (state <= maxAccept)
            {
                #region ActionSwitch

                if (state == eofNum)
                {
                    if (currentStart == 11)
                    {
                        if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                        else if (uppr * 10 > utfX) return 0;   /* default code page */
                        else return 65001;                     /* UTF-8 encoding */
                    }
                    return EndToken;
                }
                if (state > 0 && state < 5)
                {
                    // 1: Recognized '{Upper128}',	Shortest string "\xC0"
                    // 2: Recognized '{Upper128}',	Shortest string "\x80"
                    // 3: Recognized '{Upper128}',	Shortest string "\xE0"
                    // 4: Recognized '{Upper128}',	Shortest string "\xF0"   
                    ++uppr;
                }
                else if (state == 5)
                {
                    // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                    uppr += 2;
                }
                else if (state == 6)
                {
                    // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                    uppr += 3;
                }
                else if (state == 7)
                {
                    // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                    utfX += 3;
                }
                else if (state == 8)
                {
                    // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                    uppr += 2;
                }
                else if (state == 9)
                {
                    // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                    utfX += 2;
                }
                else if (state == 10)
                {
                    // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                    ++utfX;

                }


                #endregion
            }
        }
    }
} // end class Guesser

#endregion

// End of code copied from embedded resource
   
     internal sealed partial class ExampleTokenizer
    : IEnumerable<Token>
	{
		TextReader _reader = null;
		Stream _stream = null;
		string _codePage = null;
		IEnumerable<char> _string = null;
		string _filename = null;
     internal const int ErrorSymbol = -1;
		internal const int verbatimIdentifier = 0;
		internal const int outKeyword = 1;
		internal const int refKeyword = 2;
		internal const int typeOf = 3;
		internal const int defaultOf = 4;
		internal const int newKeyword = 5;
		internal const int globalKeyword = 6;
		internal const int stringType = 7;
		internal const int boolType = 8;
		internal const int charType = 9;
		internal const int floatType = 10;
		internal const int doubleType = 11;
		internal const int decimalType = 12;
		internal const int sbyteType = 13;
		internal const int byteType = 14;
		internal const int shortType = 15;
		internal const int ushortType = 16;
		internal const int intType = 17;
		internal const int uintType = 18;
		internal const int longType = 19;
		internal const int ulongType = 20;
		internal const int objectType = 21;
		internal const int boolLiteral = 22;
		internal const int nullLiteral = 23;
		internal const int thisRef = 24;
		internal const int baseRef = 25;
		internal const int verbatimStringLiteral = 26;
		internal const int stringLiteral = 27;
		internal const int characterLiteral = 28;
		internal const int lte = 29;
		internal const int lt = 30;
		internal const int gte = 31;
		internal const int gt = 32;
		internal const int eqEq = 33;
		internal const int notEq = 34;
		internal const int eq = 35;
		internal const int inc = 36;
		internal const int addAssign = 37;
		internal const int add = 38;
		internal const int dec = 39;
		internal const int subAssign = 40;
		internal const int sub = 41;
		internal const int mulAssign = 42;
		internal const int mul = 43;
		internal const int divAssign = 44;
		internal const int div = 45;
		internal const int modAssign = 46;
		internal const int mod = 47;
		internal const int and = 48;
		internal const int bitwiseAndAssign = 49;
		internal const int bitwiseAnd = 50;
		internal const int or = 51;
		internal const int bitwiseOrAssign = 52;
		internal const int bitwiseOr = 53;
		internal const int not = 54;
		internal const int lbracket = 55;
		internal const int rbracket = 56;
		internal const int lparen = 57;
		internal const int rparen = 58;
		internal const int lbrace = 59;
		internal const int rbrace = 60;
		internal const int comma = 61;
		internal const int colonColon = 62;
		internal const int dot = 63;
		internal const int integerLiteral = 64;
		internal const int floatLiteral = 65;
		internal const int identifier = 69;
     internal ExampleTokenizer(TextReader reader)
		{
			_reader = reader;
		}

     internal ExampleTokenizer(IEnumerable<char> text)
		{
			_string = text;
		}
     internal ExampleTokenizer(Stream stream,string codePage)
		{
			_stream = stream;
			_codePage = codePage;
		}
     internal ExampleTokenizer(Stream stream)
		{
			_stream = stream;
		}
     private ExampleTokenizer() { }
     public static ExampleTokenizer Open(string filename,string codePage)
		{
			var tokenizer = new 
     ExampleTokenizer();
			tokenizer._filename = filename;
			tokenizer._codePage = codePage;
			return tokenizer;
		}
     public static ExampleTokenizer Open(string filename)
		{
			var tokenizer = new 
     ExampleTokenizer();
			tokenizer._filename = filename;
			return tokenizer;
		}
		public IEnumerator<Token> GetEnumerator()
		{
			if(null!=_reader)
			{
				var result = new 
     Enumerator(_reader);
				_reader = null;
				return result;
			}
			if(null!=_string)
			{
				return new 
     Enumerator(_string);
			}
			if(null!=_stream)
			{
     Enumerator result = null;
				if(null!=_codePage)
				{
					result = new 
     Enumerator(_stream, _codePage);
				} else
				{
					result = new 
     Enumerator(_stream);
				}
				_stream = null;
				return result;
			}
			if(null!=_filename)
			{
				if(null!=_codePage)
					return new 
     Enumerator(_filename, File.OpenRead(_filename), _codePage);
				else
					return new 
     Enumerator(_filename, File.OpenText(_filename));
			}
			throw new NotSupportedException("This type of input can be enumerated only once");
		}
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}
	
        /// <summary>
        /// Summary Canonical example of GPLEX automaton
        /// </summary>
     
        // If the compiler can't find the scanner base class maybe you
        // need to run GPPG with the /gplex option, or GPLEX with /noparser

     internal sealed partial class Enumerator
          : IEnumerator<Token>
        {
            private const int _Disposed = -3;
		    private const int _Initial = -2;
		    private const int _EndOfInput = -1;
		    private const int _Enumerating = 0;
		    private int _state=_Initial;
		    private Token _current;
		    private IDisposable _ownedInput;

            private ScanBuff buffer;
            private int currentScOrd;  // start condition ordinal
        
            /// <summary>
            /// The input buffer for this scanner.
            /// </summary>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            public ScanBuff Buffer { get { return buffer; } }
        
      
 
        const int maxAccept = 181;
        const int initial = 182;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

            int state;
            int currentStart = startState[0];
            int code;      // last code read
            int cCol;      // column number of code
            int lNum;      // current line number
            //
            // The following instance variables are used, among other
            // things, for constructing the yylloc location objects.
            //
            int tokPos;        // buffer position at start of token
            int tokCol;        // zero-based column number at start of token
            int tokLin;        // line number at start of token
            int tokEPos;       // buffer position at end of token
            int tokECol;       // column number at end of token
            int tokELin;       // line number at end of token
            string tokTxt;     // lazily constructed text of token
#if STACK          
            private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {182, 0};

   static int[] anchorState = null;
#region TwoLevelCharacterMap
    //
    // There are 61 equivalence classes
    // There are 256 character sequence regions
    // There are 52 tables, 13312 entries
    //
    static sbyte[] mLo0 = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 59, 60, 60, 60, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 60, 38, 25, 0, 0, 43, 44, 27, 48, 49, 41, 39, 52, 40, 54, 42, 
/*      '0' */ 29, 30, 30, 30, 30, 30, 30, 30, 33, 33, 53, 0, 35, 36, 37, 0, 
/*      '@' */ 1, 32, 32, 32, 58, 56, 58, 2, 2, 2, 2, 2, 55, 57, 2, 2, 
/*      'P' */ 2, 2, 2, 2, 2, 34, 2, 2, 2, 2, 2, 46, 26, 47, 0, 2, 
/*      '`' */ 0, 13, 18, 21, 12, 8, 9, 17, 22, 20, 24, 2, 14, 23, 15, 4, 
/*      'p' */ 11, 2, 7, 19, 6, 5, 28, 16, 31, 10, 2, 50, 45, 51, 0, 0, 
/*   '\x80' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x90' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\xA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
/*   '\xB0' */ 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
/*   '\xC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xD0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xE0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xF0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo1 = new sbyte[256] {
/* '\u0100' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0110' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0120' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0130' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0140' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0150' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0160' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0170' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0180' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0190' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo2 = new sbyte[256] {
/* '\u0200' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0210' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0220' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0230' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0240' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0250' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0260' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0270' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0280' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0290' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u02A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u02B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u02C0' */ 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u02D0' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u02E0' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 
/* '\u02F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo3 = new sbyte[256] {
/* '\u0300' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0310' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0320' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0330' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0340' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0350' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0360' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0370' */ 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 
/* '\u0380' */ 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 
/* '\u0390' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u03A0' */ 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u03B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u03C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u03D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u03E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u03F0' */ 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo4 = new sbyte[256] {
/* '\u0400' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0410' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0420' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0430' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0440' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0450' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0460' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0470' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0480' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0490' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u04A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u04B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u04C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u04D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u04E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u04F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo5 = new sbyte[256] {
/* '\u0500' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0510' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0520' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0530' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0540' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0550' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 
/* '\u0560' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0570' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0580' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0590' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u05A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u05B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u05C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u05D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u05E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u05F0' */ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo6 = new sbyte[256] {
/* '\u0600' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0610' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0620' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0630' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0640' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u0650' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0660' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 
/* '\u0670' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0680' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0690' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u06A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u06B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u06C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u06D0' */ 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u06E0' */ 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
/* '\u06F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 0, 0, 2 };
    static sbyte[] mLo7 = new sbyte[256] {
/* '\u0700' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0710' */ 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0720' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0730' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0740' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\u0750' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0760' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0770' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0780' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0790' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u07A0' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u07B0' */ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u07C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 
/* '\u07D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u07E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u07F0' */ 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0 };
    static sbyte[] mLo8 = new sbyte[256] {
/* '\u0800' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0810' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
/* '\u0820' */ 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0830' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0840' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0850' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0860' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0870' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0880' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0890' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u08A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u08B0' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u08C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u08D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u08E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u08F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo9 = new sbyte[256] {
/* '\u0900' */ 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0910' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0920' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0930' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 
/* '\u0940' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0950' */ 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0960' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0970' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0980' */ 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 
/* '\u0990' */ 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u09A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\u09B0' */ 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 
/* '\u09C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 
/* '\u09D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 
/* '\u09E0' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u09F0' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo10 = new sbyte[256] {
/* '\u0A00' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 
/* '\u0A10' */ 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0A20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0A30' */ 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\u0A40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0A50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 
/* '\u0A60' */ 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0A70' */ 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0A80' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 
/* '\u0A90' */ 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0AA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0AB0' */ 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 
/* '\u0AC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0AD0' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0AE0' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0AF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo11 = new sbyte[256] {
/* '\u0B00' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 
/* '\u0B10' */ 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0B20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0B30' */ 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 
/* '\u0B40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0B50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 
/* '\u0B60' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0B70' */ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0B80' */ 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
/* '\u0B90' */ 2, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 2, 2, 
/* '\u0BA0' */ 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 
/* '\u0BB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\u0BC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0BD0' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0BE0' */ 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0BF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo12 = new sbyte[256] {
/* '\u0C00' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\u0C10' */ 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0C20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0C30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 
/* '\u0C40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0C50' */ 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u0C60' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0C70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0C80' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\u0C90' */ 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0CA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0CB0' */ 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 
/* '\u0CC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0CD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 
/* '\u0CE0' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0CF0' */ 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo13 = new sbyte[256] {
/* '\u0D00' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\u0D10' */ 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0D20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0D30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 
/* '\u0D40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 
/* '\u0D50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\u0D60' */ 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0D70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0D80' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0D90' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\u0DA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0DB0' */ 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 
/* '\u0DC0' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0DD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0DE0' */ 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u0DF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo14 = new sbyte[256] {
/* '\u0E00' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0E10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0E20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0E30' */ 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0E40' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0E50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u0E60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0E70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0E80' */ 0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2, 0, 0, 
/* '\u0E90' */ 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0EA0' */ 0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 2, 2, 0, 2, 2, 2, 
/* '\u0EB0' */ 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
/* '\u0EC0' */ 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0ED0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 2, 
/* '\u0EE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0EF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo15 = new sbyte[256] {
/* '\u0F00' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0F10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0F20' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u0F30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0F40' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0F50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u0F60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\u0F70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0F80' */ 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\u0F90' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0FA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0FB0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0FC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0FD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0FE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u0FF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo16 = new sbyte[256] {
/* '\u1000' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1010' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1020' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u1030' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\u1040' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u1050' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 
/* '\u1060' */ 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
/* '\u1070' */ 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1080' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 
/* '\u1090' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u10A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u10B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u10C0' */ 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 
/* '\u10D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u10E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u10F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2 };
    static sbyte[] mLo18 = new sbyte[256] {
/* '\u1200' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1210' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1220' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1230' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1240' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 
/* '\u1250' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 0, 0, 
/* '\u1260' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1270' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1280' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 
/* '\u1290' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u12A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u12B0' */ 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u12C0' */ 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u12D0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u12E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u12F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo19 = new sbyte[256] {
/* '\u1300' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1310' */ 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1320' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1330' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1340' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1350' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u1360' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1370' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1380' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1390' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u13A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u13B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u13C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u13D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u13E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u13F0' */ 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0 };
    static sbyte[] mLo20 = new sbyte[256] {
/* '\u1400' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1410' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1420' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1430' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1440' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1450' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1460' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1470' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1480' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1490' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u14A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u14B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u14C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u14D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u14E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u14F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo22 = new sbyte[256] {
/* '\u1600' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1610' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1620' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1630' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1640' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1650' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1660' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 
/* '\u1670' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1680' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1690' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u16A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u16B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u16C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u16D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u16E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u16F0' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo23 = new sbyte[256] {
/* '\u1700' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\u1710' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1720' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1730' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1740' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1750' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1760' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\u1770' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1780' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1790' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u17A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u17B0' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u17C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u17D0' */ 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 
/* '\u17E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u17F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo24 = new sbyte[256] {
/* '\u1800' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1810' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u1820' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1830' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1840' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1850' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1860' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1870' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1880' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1890' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u18A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 
/* '\u18B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u18C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u18D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u18E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u18F0' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo25 = new sbyte[256] {
/* '\u1900' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1910' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u1920' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1930' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1940' */ 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\u1950' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1960' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\u1970' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1980' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1990' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u19A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\u19B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u19C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\u19D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u19E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u19F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo26 = new sbyte[256] {
/* '\u1A00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1A10' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1A20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1A30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1A40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1A50' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1A60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1A70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1A80' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u1A90' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u1AA0' */ 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1AB0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1AC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1AD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1AE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1AF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo27 = new sbyte[256] {
/* '\u1B00' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1B10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1B20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1B30' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1B40' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\u1B50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\u1B60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1B70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1B80' */ 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1B90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1BA0' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
/* '\u1BB0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 
/* '\u1BC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1BD0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1BE0' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1BF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo28 = new sbyte[256] {
/* '\u1C00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1C10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1C20' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1C30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1C40' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 2, 
/* '\u1C50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 
/* '\u1C60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1C70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\u1C80' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1C90' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1CA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1CB0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1CC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1CD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1CE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 
/* '\u1CF0' */ 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo29 = new sbyte[256] {
/* '\u1D00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1D90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1DA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1DB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1DC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1DD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1DE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u1DF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo31 = new sbyte[256] {
/* '\u1F00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1F10' */ 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\u1F20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1F30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1F40' */ 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\u1F50' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 
/* '\u1F60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1F70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\u1F80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1F90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1FA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u1FB0' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 
/* '\u1FC0' */ 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\u1FD0' */ 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\u1FE0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\u1FF0' */ 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0 };
    static sbyte[] mLo32 = new sbyte[256] {
/* '\u2000' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2010' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2020' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2030' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2040' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2050' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2060' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2070' */ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\u2080' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2090' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\u20A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u20B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u20C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u20D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u20E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u20F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo33 = new sbyte[256] {
/* '\u2100' */ 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\u2110' */ 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 
/* '\u2120' */ 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 
/* '\u2130' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 
/* '\u2140' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 
/* '\u2150' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2160' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2170' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2180' */ 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2190' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo34 = new sbyte[256] {
/* '\u2200' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2210' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2220' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2230' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2240' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2250' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2260' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2270' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2280' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2290' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo44 = new sbyte[256] {
/* '\u2C00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u2C30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u2C60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2C90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2CA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2CB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2CC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2CD0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2CE0' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 
/* '\u2CF0' */ 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo45 = new sbyte[256] {
/* '\u2D00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2D10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2D20' */ 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 
/* '\u2D30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2D40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2D50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2D60' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\u2D70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2D80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u2D90' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2DA0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u2DB0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u2DC0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u2DD0' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u2DE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2DF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo46 = new sbyte[256] {
/* '\u2E00' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\u2E30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E80' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E90' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2EA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2EB0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2EC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2ED0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2EE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2EF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo48 = new sbyte[256] {
/* '\u3000' */ 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3010' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3020' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3030' */ 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 
/* '\u3040' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3050' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3060' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3070' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3080' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3090' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\u30A0' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u30B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u30C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u30D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u30E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u30F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2 };
    static sbyte[] mLo49 = new sbyte[256] {
/* '\u3100' */ 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3110' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3120' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\u3130' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3140' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3150' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3160' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3170' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u3180' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\u3190' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u31A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u31B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\u31C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u31D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u31E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u31F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo77 = new sbyte[256] {
/* '\u4D00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4D90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4DA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u4DB0' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u4DC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u4DD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u4DE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u4DF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo159 = new sbyte[256] {
/* '\u9F00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9F90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9FA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9FB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9FC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u9FD0' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u9FE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u9FF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo164 = new sbyte[256] {
/* '\uA400' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA410' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA420' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA430' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA440' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA450' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA460' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA470' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA480' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\uA490' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA4A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA4B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA4C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA4D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA4E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA4F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0 };
    static sbyte[] mLo166 = new sbyte[256] {
/* '\uA600' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\uA610' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA620' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0, 
/* '\uA630' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA640' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA650' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA660' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\uA670' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\uA680' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA690' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\uA6A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA6B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA6C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA6D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA6E0' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA6F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo167 = new sbyte[256] {
/* '\uA700' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA710' */ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA720' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA730' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA740' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA750' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA760' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA770' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA780' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 
/* '\uA790' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA7A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\uA7B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA7C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA7D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA7E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA7F0' */ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo168 = new sbyte[256] {
/* '\uA800' */ 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 
/* '\uA810' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA820' */ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA830' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA840' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA850' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA860' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA870' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA880' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA890' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA8A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA8B0' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA8C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA8D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\uA8E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA8F0' */ 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0 };
    static sbyte[] mLo169 = new sbyte[256] {
/* '\uA900' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 
/* '\uA910' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA920' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA930' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA940' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA950' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA960' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA970' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\uA980' */ 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA990' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA9A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA9B0' */ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uA9C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
/* '\uA9D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\uA9E0' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uA9F0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 0 };
    static sbyte[] mLo170 = new sbyte[256] {
/* '\uAA00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAA10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAA20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
/* '\uAA30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uAA40' */ 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\uAA50' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\uAA60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAA70' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 
/* '\uAA80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAA90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAAA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAAB0' */ 0, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 
/* '\uAAC0' */ 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uAAD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 
/* '\uAAE0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\uAAF0' */ 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo171 = new sbyte[256] {
/* '\uAB00' */ 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 
/* '\uAB10' */ 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uAB20' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\uAB30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAB40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAB50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 
/* '\uAB60' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uAB70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAB80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uAB90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uABA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uABB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uABC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uABD0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uABE0' */ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uABF0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo215 = new sbyte[256] {
/* '\uD700' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD710' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD720' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD730' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD740' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD750' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD760' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD770' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD780' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD790' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD7A0' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uD7B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD7C0' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 
/* '\uD7D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD7E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uD7F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0 };
    static sbyte[] mLo250 = new sbyte[256] {
/* '\uFA00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\uFA70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFA90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFAA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFAB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFAC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFAD0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\uFAE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFAF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo251 = new sbyte[256] {
/* '\uFB00' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFB10' */ 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 
/* '\uFB20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\uFB30' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 
/* '\uFB40' */ 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFB50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFB60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFB70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFB80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFB90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFBA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFBB0' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFBC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFBD0' */ 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFBE0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFBF0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mLo253 = new sbyte[256] {
/* '\uFD00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\uFD40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFD50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFD90' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFDA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFDB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFDC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDF0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0 };
    static sbyte[] mLo254 = new sbyte[256] {
/* '\uFE00' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFE70' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFE80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFE90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFEA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFEB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFEC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFED0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFEE0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFEF0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0 };
    static sbyte[] mLo255 = new sbyte[256] {
/* '\uFF00' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFF10' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\uFF20' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFF30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\uFF40' */ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFF50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\uFF60' */ 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFF70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFF80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFF90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFFA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\uFFB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\uFFC0' */ 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\uFFD0' */ 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 
/* '\uFFE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFFF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    static sbyte[][] map = new sbyte[256][] {
/* '\u00xx' */ mLo0, mLo1, mLo2, mLo3, mLo4, mLo5, mLo6, mLo7, mLo8, mLo9, mLo10, mLo11, mLo12, mLo13, mLo14, mLo15, 
/* '\u10xx' */ mLo16, mLo1, mLo18, mLo19, mLo20, mLo1, mLo22, mLo23, mLo24, mLo25, mLo26, mLo27, mLo28, mLo29, mLo1, mLo31, 
/* '\u20xx' */ mLo32, mLo33, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo44, mLo45, mLo46, mLo34, 
/* '\u30xx' */ mLo48, mLo49, mLo34, mLo34, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u40xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo77, mLo1, mLo1, 
/* '\u50xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u60xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u70xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u80xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u90xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo159, 
/* '\uA0xx' */ mLo1, mLo1, mLo1, mLo1, mLo164, mLo1, mLo166, mLo167, mLo168, mLo169, mLo170, mLo171, mLo1, mLo1, mLo1, mLo1, 
/* '\uB0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uC0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uD0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo215, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, 
/* '\uE0xx' */ mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, 
/* '\uF0xx' */ mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo1, mLo250, mLo251, mLo1, mLo253, mLo254, mLo255};

#endregion

#region CompressedCharacterMap
    //
    // There are 61 equivalence classes
    // There are 56 character sequence regions
    // There are 15 tables, 5169 entries
    // There are 41 runs, 0 singletons
    // Decision tree depth is 6
    //
    static sbyte[] mapC0 = new sbyte[251] {
/* '\U00010000' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 
/* '\U00010010' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010020' */ 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010030' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 
/* '\U00010040' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\U00010050' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\U00010060' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010070' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010080' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010090' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000100A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000100B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000100C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000100D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000100E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000100F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mapC2 = new sbyte[384] {
/* '\U00010280' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010290' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\U000102A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000102B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000102C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000102D0' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000102E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000102F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010300' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010310' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010320' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010330' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010340' */ 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\U00010350' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010360' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010370' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010380' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010390' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
/* '\U000103A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000103B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000103C0' */ 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000103D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000103E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000103F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mapC4 = new sbyte[198] {
/* '\U0001049E' */ 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 
/* '\U000104AE' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000104BE' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000104CE' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000104DE' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000104EE' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000104FE' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001050E' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001051E' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\U0001052E' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001053E' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001054E' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001055E' */ 2, 2, 2, 2, 2, 2 };
    static sbyte[] mapC7 = new sbyte[49] {
/* '\U00010737' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010747' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U00010757' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 
2 };
    static sbyte[] mapC9 = new sbyte[1267] {
/* '\U00010800' */ 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\U00010810' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010820' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010830' */ 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 
/* '\U00010840' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010850' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010860' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010870' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010880' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010890' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U000108A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000108B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000108C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000108D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000108E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000108F0' */ 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010900' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010910' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010920' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010930' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\U00010940' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010950' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010960' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010970' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010980' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010990' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000109A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000109B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 
/* '\U000109C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000109D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000109E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000109F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010A00' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010A10' */ 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010A20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010A30' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010A40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010A50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010A60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010A70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\U00010A80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010A90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\U00010AA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010AB0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010AC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010AD0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010AE0' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010AF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010B00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010B10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010B20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010B30' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010B40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010B50' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010B60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010B70' */ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010B80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010B90' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010BA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010BB0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010BC0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010BD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010BE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010BF0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010C00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010C10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010C20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010C30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010C40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010C50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010C60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010C70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010C80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010C90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010CA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010CB0' */ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00010CC0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010CD0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010CE0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00010CF0' */ 2, 2, 2 };
    static sbyte[] mapC11 = new sbyte[863] {
/* '\U00011003' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011013' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011023' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011033' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011043' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011053' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011063' */ 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 
/* '\U00011073' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011083' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011093' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000110A3' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\U000110B3' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000110C3' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\U000110D3' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000110E3' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 
/* '\U000110F3' */ 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011103' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011113' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011123' */ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011133' */ 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 
/* '\U00011143' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\U00011153' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011163' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011173' */ 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011183' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011193' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000111A3' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000111B3' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
/* '\U000111C3' */ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 
/* '\U000111D3' */ 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 
/* '\U000111E3' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000111F3' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\U00011203' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U00011213' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011223' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011233' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011243' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011253' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011263' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011273' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\U00011283' */ 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 
/* '\U00011293' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 
/* '\U000112A3' */ 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
/* '\U000112B3' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000112C3' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000112D3' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\U000112E3' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 
/* '\U000112F3' */ 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011303' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 
/* '\U00011313' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011323' */ 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 
/* '\U00011333' */ 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
/* '\U00011343' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
/* '\U00011353' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2 };
    static sbyte[] mapC13 = new sbyte[90] {
/* '\U00011480' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011490' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000114A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000114B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000114C0' */ 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000114D0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mapC15 = new sbyte[442] {
/* '\U00011580' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011590' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000115A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U000115B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000115C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000115D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\U000115E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000115F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011600' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011610' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011620' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011630' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011640' */ 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011650' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\U00011660' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011670' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011680' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011690' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000116A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\U000116B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000116C0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\U000116D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000116E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U000116F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011700' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00011710' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
/* '\U00011720' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00011730' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mapC17 = new sbyte[96] {
/* '\U000118A0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000118B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000118C0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000118D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U000118E0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 
/* '\U000118F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 };
    static sbyte[] mapC30 = new sbyte[343] {
/* '\U00016A39' */ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016A49' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016A59' */ 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00016A69' */ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016A79' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016A89' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016A99' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016AA9' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016AB9' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016AC9' */ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016AD9' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016AE9' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016AF9' */ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016B09' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016B19' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016B29' */ 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016B39' */ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\U00016B49' */ 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U00016B59' */ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\U00016B69' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U00016B79' */ 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016B89' */ 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mapC32 = new sbyte[160] {
/* '\U00016F00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016F10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016F20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016F30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U00016F40' */ 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016F50' */ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016F60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016F70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016F80' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\U00016F90' */ 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mapC36 = new sbyte[154] {
/* '\U0001BC00' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001BC10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001BC20' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001BC30' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001BC40' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001BC50' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001BC60' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
/* '\U0001BC70' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 
/* '\U0001BC80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
/* '\U0001BC90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    static sbyte[] mapC38 = new sbyte[338] {
/* '\U0001D400' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D410' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D420' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D430' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D440' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D450' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D460' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D470' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D480' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D490' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\U0001D4A0' */ 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 
/* '\U0001D4B0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 
/* '\U0001D4C0' */ 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D4D0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D4E0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D4F0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D500' */ 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 
/* '\U0001D510' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\U0001D520' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D530' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 
/* '\U0001D540' */ 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 
/* '\U0001D550' */ 2, 0 };
    static sbyte[] mapC40 = new sbyte[346] {
/* '\U0001D6A6' */ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D6B6' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 
/* '\U0001D6C6' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D6D6' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D6E6' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D6F6' */ 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D706' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U0001D716' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D726' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 
/* '\U0001D736' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D746' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\U0001D756' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D766' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 
/* '\U0001D776' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D786' */ 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D796' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D7A6' */ 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001D7B6' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 
/* '\U0001D7C6' */ 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D7D6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D7E6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/* '\U0001D7F6' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    static sbyte[] mapC44 = new sbyte[188] {
/* '\U0001EE00' */ 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001EE10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001EE20' */ 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 
/* '\U0001EE30' */ 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 
/* '\U0001EE40' */ 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 
/* '\U0001EE50' */ 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 
/* '\U0001EE60' */ 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 
/* '\U0001EE70' */ 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 
/* '\U0001EE80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 
/* '\U0001EE90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 
/* '\U0001EEA0' */ 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 
/* '\U0001EEB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };

    static sbyte MapC(int code)
    { // '\U00010000' <= code <= '\U0010FFFF'
      if (code < 83527) // '\U00010000' <= code <= '\U00014646'
        if (code < 70874) // '\U00010000' <= code <= '\U000114D9'
          if (code < 67383) // '\U00010000' <= code <= '\U00010736'
            if (code < 66560) // '\U00010000' <= code <= '\U000103FF'
              if (code < 65787) // '\U00010000' <= code <= '\U000100FA'
                return mapC0[code - 65536];
              else // '\U000100FB' <= code <= '\U000103FF'
                if (code < 66176) // '\U000100FB' <= code <= '\U0001027F'
                  return (sbyte)0;
                else // '\U00010280' <= code <= '\U000103FF'
                  return mapC2[code - 66176];
            else // '\U00010400' <= code <= '\U00010736'
              if (code < 66916) // '\U00010400' <= code <= '\U00010563'
                if (code < 66718) // '\U00010400' <= code <= '\U0001049D'
                  return (sbyte)2;
                else // '\U0001049E' <= code <= '\U00010563'
                  return mapC4[code - 66718];
              else // '\U00010564' <= code <= '\U00010736'
                if (code < 67072) // '\U00010564' <= code <= '\U000105FF'
                  return (sbyte)0;
                else // '\U00010600' <= code <= '\U00010736'
                  return (sbyte)2;
          else // '\U00010737' <= code <= '\U000114D9'
            if (code < 68851) // '\U00010737' <= code <= '\U00010CF2'
              if (code < 67432) // '\U00010737' <= code <= '\U00010767'
                return mapC7[code - 67383];
              else // '\U00010768' <= code <= '\U00010CF2'
                if (code < 67584) // '\U00010768' <= code <= '\U000107FF'
                  return (sbyte)0;
                else // '\U00010800' <= code <= '\U00010CF2'
                  return mapC9[code - 67584];
            else // '\U00010CF3' <= code <= '\U000114D9'
              if (code < 70498) // '\U00010CF3' <= code <= '\U00011361'
                if (code < 69635) // '\U00010CF3' <= code <= '\U00011002'
                  return (sbyte)0;
                else // '\U00011003' <= code <= '\U00011361'
                  return mapC11[code - 69635];
              else // '\U00011362' <= code <= '\U000114D9'
                if (code < 70784) // '\U00011362' <= code <= '\U0001147F'
                  return (sbyte)0;
                else // '\U00011480' <= code <= '\U000114D9'
                  return mapC13[code - 70784];
        else // '\U000114DA' <= code <= '\U00014646'
          if (code < 73728) // '\U000114DA' <= code <= '\U00011FFF'
            if (code < 71840) // '\U000114DA' <= code <= '\U0001189F'
              if (code < 71040) // '\U000114DA' <= code <= '\U0001157F'
                return (sbyte)0;
              else // '\U00011580' <= code <= '\U0001189F'
                if (code < 71482) // '\U00011580' <= code <= '\U00011739'
                  return mapC15[code - 71040];
                else // '\U0001173A' <= code <= '\U0001189F'
                  return (sbyte)0;
            else // '\U000118A0' <= code <= '\U00011FFF'
              if (code < 72384) // '\U000118A0' <= code <= '\U00011ABF'
                if (code < 71936) // '\U000118A0' <= code <= '\U000118FF'
                  return mapC17[code - 71840];
                else // '\U00011900' <= code <= '\U00011ABF'
                  return (sbyte)0;
              else // '\U00011AC0' <= code <= '\U00011FFF'
                if (code < 72441) // '\U00011AC0' <= code <= '\U00011AF8'
                  return (sbyte)2;
                else // '\U00011AF9' <= code <= '\U00011FFF'
                  return (sbyte)0;
          else // '\U00012000' <= code <= '\U00014646'
            if (code < 75076) // '\U00012000' <= code <= '\U00012543'
              if (code < 74650) // '\U00012000' <= code <= '\U00012399'
                return (sbyte)2;
              else // '\U0001239A' <= code <= '\U00012543'
                if (code < 74880) // '\U0001239A' <= code <= '\U0001247F'
                  return (sbyte)0;
                else // '\U00012480' <= code <= '\U00012543'
                  return (sbyte)2;
            else // '\U00012544' <= code <= '\U00014646'
              if (code < 78895) // '\U00012544' <= code <= '\U0001342E'
                if (code < 77824) // '\U00012544' <= code <= '\U00012FFF'
                  return (sbyte)0;
                else // '\U00013000' <= code <= '\U0001342E'
                  return (sbyte)2;
              else // '\U0001342F' <= code <= '\U00014646'
                if (code < 82944) // '\U0001342F' <= code <= '\U000143FF'
                  return (sbyte)0;
                else // '\U00014400' <= code <= '\U00014646'
                  return (sbyte)2;
      else // '\U00014647' <= code <= '\U0010FFFF'
        if (code < 124928) // '\U00014647' <= code <= '\U0001E7FF'
          if (code < 110594) // '\U00014647' <= code <= '\U0001B001'
            if (code < 93072) // '\U00014647' <= code <= '\U00016B8F'
              if (code < 92160) // '\U00014647' <= code <= '\U000167FF'
                return (sbyte)0;
              else // '\U00016800' <= code <= '\U00016B8F'
                if (code < 92729) // '\U00016800' <= code <= '\U00016A38'
                  return (sbyte)2;
                else // '\U00016A39' <= code <= '\U00016B8F'
                  return mapC30[code - 92729];
            else // '\U00016B90' <= code <= '\U0001B001'
              if (code < 94112) // '\U00016B90' <= code <= '\U00016F9F'
                if (code < 93952) // '\U00016B90' <= code <= '\U00016EFF'
                  return (sbyte)0;
                else // '\U00016F00' <= code <= '\U00016F9F'
                  return mapC32[code - 93952];
              else // '\U00016FA0' <= code <= '\U0001B001'
                if (code < 110592) // '\U00016FA0' <= code <= '\U0001AFFF'
                  return (sbyte)0;
                else // '\U0001B000' <= code <= '\U0001B001'
                  return (sbyte)2;
          else // '\U0001B002' <= code <= '\U0001E7FF'
            if (code < 119808) // '\U0001B002' <= code <= '\U0001D3FF'
              if (code < 113664) // '\U0001B002' <= code <= '\U0001BBFF'
                return (sbyte)0;
              else // '\U0001BC00' <= code <= '\U0001D3FF'
                if (code < 113818) // '\U0001BC00' <= code <= '\U0001BC99'
                  return mapC36[code - 113664];
                else // '\U0001BC9A' <= code <= '\U0001D3FF'
                  return (sbyte)0;
            else // '\U0001D400' <= code <= '\U0001E7FF'
              if (code < 120486) // '\U0001D400' <= code <= '\U0001D6A5'
                if (code < 120146) // '\U0001D400' <= code <= '\U0001D551'
                  return mapC38[code - 119808];
                else // '\U0001D552' <= code <= '\U0001D6A5'
                  return (sbyte)2;
              else // '\U0001D6A6' <= code <= '\U0001E7FF'
                if (code < 120832) // '\U0001D6A6' <= code <= '\U0001D7FF'
                  return mapC40[code - 120486];
                else // '\U0001D800' <= code <= '\U0001E7FF'
                  return (sbyte)0;
        else // '\U0001E800' <= code <= '\U0010FFFF'
          if (code < 177973) // '\U0001E800' <= code <= '\U0002B734'
            if (code < 126652) // '\U0001E800' <= code <= '\U0001EEBB'
              if (code < 125125) // '\U0001E800' <= code <= '\U0001E8C4'
                return (sbyte)2;
              else // '\U0001E8C5' <= code <= '\U0001EEBB'
                if (code < 126464) // '\U0001E8C5' <= code <= '\U0001EDFF'
                  return (sbyte)0;
                else // '\U0001EE00' <= code <= '\U0001EEBB'
                  return mapC44[code - 126464];
            else // '\U0001EEBC' <= code <= '\U0002B734'
              if (code < 173783) // '\U0001EEBC' <= code <= '\U0002A6D6'
                if (code < 131072) // '\U0001EEBC' <= code <= '\U0001FFFF'
                  return (sbyte)0;
                else // '\U00020000' <= code <= '\U0002A6D6'
                  return (sbyte)2;
              else // '\U0002A6D7' <= code <= '\U0002B734'
                if (code < 173824) // '\U0002A6D7' <= code <= '\U0002A6FF'
                  return (sbyte)0;
                else // '\U0002A700' <= code <= '\U0002B734'
                  return (sbyte)2;
          else // '\U0002B735' <= code <= '\U0010FFFF'
            if (code < 178208) // '\U0002B735' <= code <= '\U0002B81F'
              if (code < 177984) // '\U0002B735' <= code <= '\U0002B73F'
                return (sbyte)0;
              else // '\U0002B740' <= code <= '\U0002B81F'
                if (code < 178206) // '\U0002B740' <= code <= '\U0002B81D'
                  return (sbyte)2;
                else // '\U0002B81E' <= code <= '\U0002B81F'
                  return (sbyte)0;
            else // '\U0002B820' <= code <= '\U0010FFFF'
              if (code < 194560) // '\U0002B820' <= code <= '\U0002F7FF'
                if (code < 183970) // '\U0002B820' <= code <= '\U0002CEA1'
                  return (sbyte)2;
                else // '\U0002CEA2' <= code <= '\U0002F7FF'
                  return (sbyte)0;
              else // '\U0002F800' <= code <= '\U0010FFFF'
                if (code < 195102) // '\U0002F800' <= code <= '\U0002FA1D'
                  return (sbyte)2;
                else // '\U0002FA1E' <= code <= '\U0010FFFF'
                  return (sbyte)0;
    }
#endregion


    static sbyte Map(int code)
    { 
        if (code <= 65535)
            return map[code / 256][code % 256];
        else
            return MapC(code);
    }

    static Table[] NxS = new Table[203] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "\u0660"
/* NxS[   2] */ // Shortest string "@"
      new Table(25, 40, 180, new short[] {202, -1, -1, 180, -1, -1, 
          180, 180, -1, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 180, 180, 180, 180, -1, -1, -1, -1, 
          180, -1}),
/* NxS[   3] */ // Shortest string "G"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[   4] */ // Shortest string "o"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 173, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 174, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[   5] */ // Shortest string "u"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 161, 3, 
          3, 3, 3, 162, 163, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[   6] */ // Shortest string "t"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 152, 3, 3, 153, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 154, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[   7] */ // Shortest string "r"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 150, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[   8] */ // Shortest string "f"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 142, 143, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[   9] */ // Shortest string "d"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 126, 3, 3, 3, 127, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  10] */ // Shortest string "l"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 123}),
/* NxS[  11] */ // Shortest string "n"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 118, 3, 3, 119, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  12] */ // Shortest string "g"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 113, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  13] */ // Shortest string "b"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 104, 3, 3, 3, 3, 3, 105, 3, 3, 106, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  14] */ // Shortest string "s"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 91, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 92, 3, 3, 3, 93, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  15] */ // Shortest string "i"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 89, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  16] */ // Shortest string "c"
      new Table(22, 41, 3, new short[] {86, 3, 3, -1, -1, -1, 
          3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, 
          -1, -1, -1}),
/* NxS[  17] */ // Shortest string "\""
      new Table(25, 2, 200, new short[] {84, 201}),
/* NxS[  18] */ // Shortest string "'"
      new Table(26, 2, 187, new short[] {188, -1}),
/* NxS[  19] */ // Shortest string "0"
      new Table(54, 42, -1, new short[] {185, 64, 183, 43, 43, -1, 
          -1, -1, -1, -1, -1, -1, 63, -1, -1, 183, 43, -1, -1, 43, -1, 64, 
          -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, 20, 20, 
          186, -1, 20, 63}),
/* NxS[  20] */ // Shortest string "1"
      new Table(54, 42, -1, new short[] {185, 64, 183, 43, 43, -1, 
          -1, -1, -1, -1, -1, -1, 63, -1, -1, 183, 43, -1, -1, 43, -1, 64, 
          -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, 20, 20, 
          -1, -1, 20, 63}),
/* NxS[  21] */ // Shortest string "<"
      new Table(36, 1, -1, new short[] {62}),
/* NxS[  22] */ // Shortest string "="
      new Table(36, 1, -1, new short[] {61}),
/* NxS[  23] */ // Shortest string ">"
      new Table(36, 1, -1, new short[] {60}),
/* NxS[  24] */ // Shortest string "!"
      new Table(36, 1, -1, new short[] {59}),
/* NxS[  25] */ // Shortest string "+"
      new Table(36, 4, -1, new short[] {57, -1, -1, 58}),
/* NxS[  26] */ // Shortest string "-"
      new Table(36, 5, -1, new short[] {55, -1, -1, -1, 56}),
/* NxS[  27] */ // Shortest string "*"
      new Table(36, 1, -1, new short[] {54}),
/* NxS[  28] */ // Shortest string "/"
      new Table(36, 7, -1, new short[] {51, -1, -1, -1, -1, 52, 
          53}),
/* NxS[  29] */ // Shortest string "%"
      new Table(36, 1, -1, new short[] {50}),
/* NxS[  30] */ // Shortest string "&"
      new Table(36, 9, -1, new short[] {48, -1, -1, -1, -1, -1, 
          -1, -1, 49}),
/* NxS[  31] */ // Shortest string "|"
      new Table(36, 10, -1, new short[] {46, -1, -1, -1, -1, -1, 
          -1, -1, -1, 47}),
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  34] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  37] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  38] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  39] */ // Shortest string ":"
      new Table(53, 1, -1, new short[] {45}),
/* NxS[  40] */ // Shortest string "."
      new Table(29, 5, -1, new short[] {42, 42, -1, -1, 42}),
/* NxS[  41] */ // Shortest string "\n"
      new Table(59, 2, -1, new short[] {41, 41}),
/* NxS[  42] */ // Shortest string ".0"
      new Table(56, 39, -1, new short[] {183, 43, 43, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 183, 43, -1, -1, 43, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, 42, 42, -1, -1, 
          42}),
/* NxS[  43] */ new Table(0, 0, -1, null), // Shortest string "0f"
/* NxS[  44] */ // Shortest string "0e0"
      new Table(57, 38, -1, new short[] {43, 43, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, 43, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, 44, 44, -1, -1, 44}),
/* NxS[  45] */ new Table(0, 0, -1, null), // Shortest string "::"
/* NxS[  46] */ new Table(0, 0, -1, null), // Shortest string "|="
/* NxS[  47] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  48] */ new Table(0, 0, -1, null), // Shortest string "&="
/* NxS[  49] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[  50] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[  51] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[  52] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  53] */ // Shortest string "//"
      new Table(59, 1, 53, new short[] {-1}),
/* NxS[  54] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[  55] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[  56] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[  57] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[  58] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[  59] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[  60] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[  61] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[  62] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[  63] */ // Shortest string "0u"
      new Table(55, 21, -1, new short[] {65, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65}),
/* NxS[  64] */ // Shortest string "0l"
      new Table(5, 30, -1, new short[] {65, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 65}),
/* NxS[  65] */ new Table(0, 0, -1, null), // Shortest string "0ul"
/* NxS[  66] */ // Shortest string "0xe"
      new Table(55, 41, -1, new short[] {64, 67, -1, 67, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 67, 67, -1, -1, 67, 67, 64, -1, 
          -1, -1, 67, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, 67, 67, -1, 
          67, 67, 63}),
/* NxS[  67] */ // Shortest string "0xee"
      new Table(55, 41, -1, new short[] {64, 68, -1, 68, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 68, 68, -1, -1, 68, 68, 64, -1, 
          -1, -1, 68, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, 68, 68, -1, 
          68, 68, 63}),
/* NxS[  68] */ // Shortest string "0xeee"
      new Table(55, 41, -1, new short[] {64, 69, -1, 69, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 69, 69, -1, -1, 69, 69, 64, -1, 
          -1, -1, 69, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, 69, 69, -1, 
          69, 69, 63}),
/* NxS[  69] */ // Shortest string "0xeeee"
      new Table(55, 41, -1, new short[] {64, 70, -1, 70, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 70, 70, -1, -1, 70, 70, 64, -1, 
          -1, -1, 70, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, 
          70, 70, 63}),
/* NxS[  70] */ // Shortest string "0xeeeee"
      new Table(55, 41, -1, new short[] {64, 71, -1, 71, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 71, 71, -1, -1, 71, 71, 64, -1, 
          -1, -1, 71, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, 71, 71, -1, 
          71, 71, 63}),
/* NxS[  71] */ // Shortest string "0xeeeeee"
      new Table(55, 41, -1, new short[] {64, 72, -1, 72, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 72, 72, -1, -1, 72, 72, 64, -1, 
          -1, -1, 72, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, 
          72, 72, 63}),
/* NxS[  72] */ // Shortest string "0xeeeeeee"
      new Table(55, 41, -1, new short[] {64, 73, -1, 73, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 73, 73, -1, -1, 73, 73, 64, -1, 
          -1, -1, 73, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, 73, 73, -1, 
          73, 73, 63}),
/* NxS[  73] */ // Shortest string "0xeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 74, -1, 74, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 74, 74, -1, -1, 74, 74, 64, -1, 
          -1, -1, 74, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, 74, 74, -1, 
          74, 74, 63}),
/* NxS[  74] */ // Shortest string "0xeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 75, -1, 75, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 75, 75, -1, -1, 75, 75, 64, -1, 
          -1, -1, 75, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, 75, 75, -1, 
          75, 75, 63}),
/* NxS[  75] */ // Shortest string "0xeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 76, -1, 76, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 76, 76, -1, -1, 76, 76, 64, -1, 
          -1, -1, 76, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, 76, 76, -1, 
          76, 76, 63}),
/* NxS[  76] */ // Shortest string "0xeeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 77, -1, 77, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 77, 77, -1, -1, 77, 77, 64, -1, 
          -1, -1, 77, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, 
          77, 77, 63}),
/* NxS[  77] */ // Shortest string "0xeeeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 78, -1, 78, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 78, 78, -1, -1, 78, 78, 64, -1, 
          -1, -1, 78, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 78, 78, -1, 
          78, 78, 63}),
/* NxS[  78] */ // Shortest string "0xeeeeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 79, -1, 79, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 79, 79, -1, -1, 79, 79, 64, -1, 
          -1, -1, 79, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, 79, 79, -1, 
          79, 79, 63}),
/* NxS[  79] */ // Shortest string "0xeeeeeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 80, -1, 80, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 80, 80, -1, -1, 80, 80, 64, -1, 
          -1, -1, 80, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, 80, 80, -1, 
          80, 80, 63}),
/* NxS[  80] */ // Shortest string "0xeeeeeeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, 81, -1, 81, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, 81, 81, -1, -1, 81, 81, 64, -1, 
          -1, -1, 81, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, 81, 81, -1, 
          81, 81, 63}),
/* NxS[  81] */ // Shortest string "0xeeeeeeeeeeeeeeee"
      new Table(55, 41, -1, new short[] {64, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 63}),
/* NxS[  82] */ // Shortest string "'\\'"
      new Table(27, 1, -1, new short[] {83}),
/* NxS[  83] */ new Table(0, 0, -1, null), // Shortest string "'@'"
/* NxS[  84] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  85] */ // Shortest string "\"\\\""
      new Table(25, 2, 200, new short[] {84, 201}),
/* NxS[  86] */ // Shortest string "ch"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 87, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  87] */ // Shortest string "cha"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 88, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  88] */ // Shortest string "char"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[  89] */ // Shortest string "in"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 90, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  90] */ // Shortest string "int"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[  91] */ // Shortest string "st"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 100, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  92] */ // Shortest string "sb"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 97, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  93] */ // Shortest string "sh"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 94}),
/* NxS[  94] */ // Shortest string "sho"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 95, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  95] */ // Shortest string "shor"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 96, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  96] */ // Shortest string "short"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[  97] */ // Shortest string "sby"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 98, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  98] */ // Shortest string "sbyt"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 99, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[  99] */ // Shortest string "sbyte"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 100] */ // Shortest string "str"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 101, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 101] */ // Shortest string "stri"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 102, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 102] */ // Shortest string "strin"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 103, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 103] */ // Shortest string "string"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 104] */ // Shortest string "bo"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 111}),
/* NxS[ 105] */ // Shortest string "by"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 109, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 106] */ // Shortest string "ba"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 107, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 107] */ // Shortest string "bas"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 108, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 108] */ // Shortest string "base"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 109] */ // Shortest string "byt"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 110, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 110] */ // Shortest string "byte"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 111] */ // Shortest string "boo"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 112, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 112] */ // Shortest string "bool"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 113] */ // Shortest string "gl"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 114}),
/* NxS[ 114] */ // Shortest string "glo"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 115, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 115] */ // Shortest string "glob"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 116, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 116] */ // Shortest string "globa"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 117, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 117] */ // Shortest string "global"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 118] */ // Shortest string "nu"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 121, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 119] */ // Shortest string "ne"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          120, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 120] */ // Shortest string "new"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 121] */ // Shortest string "nul"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 122, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 122] */ // Shortest string "null"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 123] */ // Shortest string "lo"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 124, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 124] */ // Shortest string "lon"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 125, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 125] */ // Shortest string "long"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 126] */ // Shortest string "do"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 138, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 127] */ // Shortest string "de"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 128, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 129, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 128] */ // Shortest string "def"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 134, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 129] */ // Shortest string "dec"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 130, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 130] */ // Shortest string "deci"
      new Table(23, 40, 3, new short[] {131, 3, -1, -1, -1, 3, 
          3, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, 
          -1, -1}),
/* NxS[ 131] */ // Shortest string "decim"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 132, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 132] */ // Shortest string "decima"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 133, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 133] */ // Shortest string "decimal"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 134] */ // Shortest string "defa"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 135, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 135] */ // Shortest string "defau"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 136, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 136] */ // Shortest string "defaul"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 137, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 137] */ // Shortest string "default"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 138] */ // Shortest string "dou"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 139, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 139] */ // Shortest string "doub"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 140, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 140] */ // Shortest string "doubl"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 141, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 141] */ // Shortest string "double"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 142] */ // Shortest string "fa"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 147, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 143] */ // Shortest string "fl"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 144}),
/* NxS[ 144] */ // Shortest string "flo"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 145, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 145] */ // Shortest string "floa"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 146, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 146] */ // Shortest string "float"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 147] */ // Shortest string "fal"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 148, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 148] */ // Shortest string "tru"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 149, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 149] */ // Shortest string "true"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 150] */ // Shortest string "re"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 151, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 151] */ // Shortest string "ref"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 152] */ // Shortest string "tr"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 153] */ // Shortest string "ty"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 157, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 154] */ // Shortest string "th"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 155, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 155] */ // Shortest string "thi"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 156, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 156] */ // Shortest string "this"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 157] */ // Shortest string "typ"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 158, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 158] */ // Shortest string "type"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 159}),
/* NxS[ 159] */ // Shortest string "typeo"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 160, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 160] */ // Shortest string "typeof"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 161] */ // Shortest string "ul"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 170}),
/* NxS[ 162] */ // Shortest string "us"
      new Table(22, 41, 3, new short[] {166, 3, 3, -1, -1, -1, 
          3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, 
          -1, -1, -1}),
/* NxS[ 163] */ // Shortest string "ui"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 164, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 164] */ // Shortest string "uin"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 165, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 165] */ // Shortest string "uint"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 166] */ // Shortest string "ush"
      new Table(25, 41, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
          3, 3, 167}),
/* NxS[ 167] */ // Shortest string "usho"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 168, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 168] */ // Shortest string "ushor"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 169, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 169] */ // Shortest string "ushort"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 170] */ // Shortest string "ulo"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 171, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 171] */ // Shortest string "ulon"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 172, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 172] */ // Shortest string "ulong"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 173] */ // Shortest string "ou"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 179, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 174] */ // Shortest string "ob"
      new Table(24, 39, 3, new short[] {175, -1, -1, -1, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, 
          -1}),
/* NxS[ 175] */ // Shortest string "obj"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 176, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 176] */ // Shortest string "obje"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 177, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 177] */ // Shortest string "objec"
      new Table(55, 41, -1, new short[] {3, 3, 3, 3, -1, -1, 
          -1, -1, 3, 3, 3, 3, 178, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
          3, 3, 3}),
/* NxS[ 178] */ // Shortest string "object"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 179] */ // Shortest string "out"
      new Table(25, 38, 3, new short[] {-1, -1, -1, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1}),
/* NxS[ 180] */ // Shortest string "@G"
      new Table(25, 38, 180, new short[] {-1, -1, -1, 180, 180, 180, 
          180, 180, 180, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 180, 180, 180, 180, -1, -1, -1, -1}),
/* NxS[ 181] */ // Shortest string "@\"\""
      new Table(25, 1, -1, new short[] {202}),
/* NxS[ 182] */ // Shortest string ""
      new Table(59, 57, 3, new short[] {41, 41, 1, 2, 3, 1, 
          4, 5, 6, 7, 3, 8, 3, 3, 9, 3, 10, 11, 3, 12, 13, 14, 
          15, 16, 3, 3, 3, 17, 1, 18, 3, 19, 20, 3, 3, 20, 3, 21, 
          22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
          38, 39, 40}),
/* NxS[ 183] */ // Shortest string "0e"
      new Table(29, 12, -1, new short[] {44, 44, -1, -1, 44, -1, 
          -1, -1, -1, -1, 184, 184}),
/* NxS[ 184] */ // Shortest string "0e+"
      new Table(29, 5, -1, new short[] {44, 44, -1, -1, 44}),
/* NxS[ 185] */ // Shortest string "0."
      new Table(29, 5, -1, new short[] {42, 42, -1, -1, 42}),
/* NxS[ 186] */ // Shortest string "0x"
      new Table(56, 39, -1, new short[] {66, -1, 66, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, 66, 66, -1, -1, -1, 
          -1, 66, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, 66, 
          66}),
/* NxS[ 187] */ // Shortest string "'@"
      new Table(27, 1, -1, new short[] {83}),
/* NxS[ 188] */ // Shortest string "'\\"
      new Table(5, 30, -1, new short[] {195, 187, 187, -1, 187, -1, 
          -1, -1, 187, -1, 187, -1, -1, 187, -1, -1, -1, -1, -1, -1, 187, 187, 
          82, 187, 189, 190, 197, -1, -1, 191}),
/* NxS[ 189] */ // Shortest string "'\\0"
      new Table(27, 4, -1, new short[] {83, -1, 199, 199}),
/* NxS[ 190] */ // Shortest string "'\\1"
      new Table(29, 2, -1, new short[] {199, 199}),
/* NxS[ 191] */ // Shortest string "'\\U"
      new Table(56, 39, -1, new short[] {192, -1, 192, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 192, 192, -1, -1, 192, 192, -1, -1, -1, 
          -1, 192, -1, -1, 192, -1, -1, -1, -1, -1, -1, -1, 192, 192, -1, 192, 
          192}),
/* NxS[ 192] */ // Shortest string "'\\Ue"
      new Table(56, 39, -1, new short[] {193, -1, 193, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 193, 193, -1, -1, 193, 193, -1, -1, -1, 
          -1, 193, -1, -1, 193, -1, -1, -1, -1, -1, -1, -1, 193, 193, -1, 193, 
          193}),
/* NxS[ 193] */ // Shortest string "'\\Uee"
      new Table(56, 39, -1, new short[] {194, -1, 194, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 194, 194, -1, -1, 194, 194, -1, -1, -1, 
          -1, 194, -1, -1, 194, -1, -1, -1, -1, -1, -1, -1, 194, 194, -1, 194, 
          194}),
/* NxS[ 194] */ // Shortest string "'\\Ueee"
      new Table(56, 39, -1, new short[] {195, -1, 195, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 195, 195, -1, -1, 195, 195, -1, -1, -1, 
          -1, 195, -1, -1, 195, -1, -1, -1, -1, -1, -1, -1, 195, 195, -1, 195, 
          195}),
/* NxS[ 195] */ // Shortest string "'\\u"
      new Table(56, 39, -1, new short[] {196, -1, 196, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 196, 196, -1, -1, 196, 196, -1, -1, -1, 
          -1, 196, -1, -1, 196, -1, -1, -1, -1, -1, -1, -1, 196, 196, -1, 196, 
          196}),
/* NxS[ 196] */ // Shortest string "'\\ue"
      new Table(56, 39, -1, new short[] {197, -1, 197, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 197, 197, -1, -1, 197, 197, -1, -1, -1, 
          -1, 197, -1, -1, 197, -1, -1, -1, -1, -1, -1, -1, 197, 197, -1, 197, 
          197}),
/* NxS[ 197] */ // Shortest string "'\\x"
      new Table(56, 39, -1, new short[] {198, -1, 198, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 198, 198, -1, -1, 198, 198, -1, -1, -1, 
          -1, 198, -1, -1, 198, -1, -1, -1, -1, -1, -1, -1, 198, 198, -1, 198, 
          198}),
/* NxS[ 198] */ // Shortest string "'\\xe"
      new Table(56, 39, -1, new short[] {187, -1, 187, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 187, 187, -1, -1, 187, 187, -1, -1, -1, 
          -1, 187, -1, -1, 187, -1, -1, -1, -1, -1, -1, -1, 187, 187, -1, 187, 
          187}),
/* NxS[ 199] */ // Shortest string "'\\00"
      new Table(29, 2, -1, new short[] {187, 187}),
/* NxS[ 200] */ // Shortest string "\"@"
      new Table(25, 2, 200, new short[] {84, 201}),
/* NxS[ 201] */ // Shortest string "\"\\"
      new Table(25, 2, 200, new short[] {85, 201}),
/* NxS[ 202] */ // Shortest string "@\""
      new Table(25, 1, 202, new short[] {181}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = Map(code) - NxS[state].min;
            if (idx < 0) idx += 61;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion



            // ==============================================================
            // ==== Nested struct to support input switching in scanners ====
            // ==============================================================

		    struct BufferContext {
                internal ScanBuff buffSv;
			    internal int chrSv;
			    internal int cColSv;
			    internal int lNumSv;
		    }

#if BACKUP
            // ==============================================================
            // == Nested struct used for backup in automata that do backup ==
            // ==============================================================

            struct Context // class used for automaton backup.
            {
                public int bPos;
                public int rPos; // scanner.readPos saved value
                public int cCol;
                public int lNum; // Need this in case of backup over EOL.
                public int state;
                public int cChr;
            }
        
            private Context ctx = new Context();
#endif // BACKUP
            // ==============================================================
            // ===== Private methods to save and restore buffer contexts ====
            // ==============================================================

            /// <summary>
            /// This method creates a buffer context record from
            /// the current buffer object, together with some
            /// scanner state values. 
            /// </summary>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            BufferContext MkBuffCtx()
		    {
			    BufferContext rslt;
			    rslt.buffSv = this.buffer;
			    rslt.chrSv = this.code;
			    rslt.cColSv = this.cCol;
			    rslt.lNumSv = this.lNum;
			    return rslt;
		    }

            /// <summary>
            /// This method restores the buffer value and allied
            /// scanner state from the given context record value.
            /// </summary>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            void RestoreBuffCtx(BufferContext value)
		    {
			    this.buffer = value.buffSv;
			    this.code = value.chrSv;
			    this.cCol = value.cColSv;
			    this.lNum = value.lNumSv;
            } 
            // =================== End Nested classes =======================

         public Token Current {
			    get {
				    if(0>_state)
				    {
					    if (_Initial == _state)
						    throw new InvalidOperationException("The cursor is before the beginning of the enumeration");
					    if (_EndOfInput == _state)
						    throw new InvalidOperationException("The cursor is after the end of the enumeration");
					    _CheckDisposed();
				    }
				    return _current;
			    }
		    }
        object System.Collections.IEnumerator.Current { get { return Current; } }

		    void _CheckDisposed()
		    {
			    if (_Disposed == _state)
				    throw new ObjectDisposedException("Scanner");
		    }
		    void IDisposable.Dispose()
		    {
			    if (_Disposed != _state)
			    {
				    if (null != _ownedInput)
					    _ownedInput.Dispose();
				    _ownedInput = null;
				    _state = _Disposed;
			    }
		    }
        public bool MoveNext()
		    {
			    if(0>_state)
			    {
				    _CheckDisposed();
				    if (_EndOfInput == _state)
					    return false;
			    }
			    _state = _Enumerating;
			    int next;
			    do { next = Scan(); } while (next >= int.MaxValue);
			    if(-2==next)
			    {
				    _state = _EndOfInput;
				    return false;
			    }
			    _current.Line = tokLin;
			    _current.Column = tokCol+1;
			    _current.Position = tokPos;
			
                _current.SymbolId = next;
			    if (null==tokTxt)
				    tokTxt = buffer.GetString(tokPos, tokEPos);
			    _current.Value = tokTxt;
			    return true;
		    }
   
        void System.Collections.IEnumerator.Reset()
		    {
			    throw new NotSupportedException("This type of enumerator cannot be reset.");
		    }
            bool _TryReadUntil(int character, StringBuilder sb)
		    {
			
			    if (-1 == code) return false;
			    var chcmp = character.ToString();
			    var s = char.ConvertFromUtf32(code);
			    sb.Append(s);
			    if (code == character)
				    return true;
			    while (true)
			    {
				    GetCode();
				    if (-1 == code || code == character)
					    break;
				    s = char.ConvertFromUtf32(code);
				    sb.Append(s);
			    }
			    if (-1 != code)
			    {
				    s = char.ConvertFromUtf32(code);
				    sb.Append(s);
				    if (null == tokTxt)
					    tokTxt = sb.ToString();
				    else
					    tokTxt += sb.ToString();

				    return code == character;
			    }
			    return false;
		    }
		    // reads until the string is encountered, capturing it.
		    bool _TryReadUntilBlockEnd(string blockEnd)
		    {
			    string s = yytext;
			    var sb = new StringBuilder();
			    int ch = -1;
			    var isPair = false;
			    if (char.IsSurrogatePair(blockEnd, 0))
			    {
				    ch = char.ConvertToUtf32(blockEnd, 0);
				    isPair = true;
			    }
			    else
				    ch = blockEnd[0];
			    while (-1 != code && _TryReadUntil(ch, sb))
			    {
				    bool found = true;
				    int i = 1;
				    if (isPair)
					    ++i;
				    for (; found && i < blockEnd.Length; ++i)
				    {
					    GetCode();
					    int scmp = blockEnd[i];
					    if (char.IsSurrogatePair(blockEnd, i))
					    {
						    scmp = char.ConvertToUtf32(blockEnd, i);
						    ++i;
					    }
					    if (-1 == code || code != scmp)
						    found = false;
					    else if (-1 != code)
						    sb.Append(char.ConvertFromUtf32(code));
				    }
				    if (found)
				    {
					    // TODO: verify this
					    GetCode();
					    tokTxt = s + sb.ToString();
					    return true;
				    }
			    }
			    tokTxt = s + sb.ToString();
			    return false;
		    }
     internal Enumerator(TextReader reader)
            {
                SetSource(reader); 
            }
     internal Enumerator(IEnumerable<char> str)
            {
               IEnumerator<char> e = str.GetEnumerator();
                _ownedInput = e;
                SetSource(e); 
            }
     internal Enumerator(string filename,TextReader reader) : this(reader)
		    {
			    // we grab the filename from reader anyway
			    _ownedInput = reader;
		    }
     internal Enumerator(string filename, Stream stream, string codePage) : this(stream,codePage)
		    {
			    // we grab the filename from stream anyway
			    _ownedInput = stream;
		    }
     internal Enumerator(string filename, Stream stream) : this(stream)
		    {
			    // we grab the filename from stream anyway
			    _ownedInput = stream;
		    }
    
     internal Enumerator(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Enumerator(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
            }   

     internal Enumerator() { }

            private int readPos;

            void GetCode()
            {
                if (code == '\n')  // This needs to be fixed for other conventions
                                   // i.e. [\r\n\205\u2028\u2029]
                { 
                    cCol = -1;
                    ++lNum;
                } else if(code =='\r') {
                    cCol = -1;
                } else if(code=='\t') {
                   cCol = cCol + 3;
                }
                readPos = buffer.Pos;

                // Now read new codepoint.
                code = buffer.Read();
                if (code > ScanBuff.EndOfFile)
                {

                    if (code >= 0xD800 && code <= 0xDBFF)
                    {
                        int next = buffer.Read();
                        if (next < 0xDC00 || next > 0xDFFF)
                            code = ScanBuff.UnicodeReplacementChar;
                        else
                            code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                    }
                    ++cCol;
                }
            }

            void MarkToken()
            {
                tokPos = readPos;
                tokLin = lNum;
                tokCol = cCol;
            }
        
            void MarkEnd()
            {
                tokTxt = null;
                tokEPos = readPos;
                tokELin = lNum;
                tokECol = cCol;
            }

            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            int Peek()
            {
                int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
                GetCode(); rslt = code;
                lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
                return rslt;
            }

            // ==============================================================
            // =====    Initialization of string-based input buffers     ====
            // ==============================================================

             /// <summary>
            /// Create and initialize a StringBuff buffer object for this scanner
            /// </summary>
            /// <param name="source">the input string</param>
            /// <param name="offset">starting offset in the string</param>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            public void SetSource(IEnumerator<char> source)
            {
                this.buffer = ScanBuff.GetBuffer(source);
                this.buffer.Pos = 0;
                this.lNum = 0;
                this.code = '\n'; // to initialize yyline, yycol and lineStart
                GetCode();
            }


       

            // =============== StreamBuffer Initialization ==================

            /// <summary>
            /// Create and initialize a StreamBuff buffer object for this scanner.
            /// StreamBuff is buffer for 8-bit byte files.
            /// </summary>
            /// <param name="source">the input byte stream</param>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            public void SetSource(Stream source)
            {
                this.buffer = ScanBuff.GetBuffer(source);
                this.lNum = 0;
                this.code = '\n'; // to initialize yyline, yycol and lineStart
                GetCode();
            }
            /// <summary>
            /// Create and initialize a TextBuff buffer object for this scanner.
            /// TextBuff is a buffer for encoded unicode files.
            /// </summary>
            /// <param name="source">the input text file</param>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            public void SetSource(TextReader source)
            {
                this.buffer = ScanBuff.GetBuffer(source);
                this.lNum = 0;
                this.code = '\n'; // to initialize yyline, yycol and lineStart
                GetCode();
            }
            // ================ TextBuffer Initialization ===================

            /// <summary>
            /// Create and initialize a TextBuff buffer object for this scanner.
            /// TextBuff is a buffer for encoded unicode files.
            /// </summary>
            /// <param name="source">the input text file</param>
            /// <param name="fallbackCodePage">Code page to use if file has
            /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            public void SetSource(Stream source, int fallbackCodePage)
            {
                this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
                this.lNum = 0;
                this.code = '\n'; // to initialize yyline, yycol and lineStart
                GetCode();
            }
        
            // ======== AbstractScanner<> Implementation =========

            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
            public int yylex()
            {
                int next;
                do { next = Scan(); } while (next >= int.MaxValue);
                return next;
            }
        
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            int yypos { get { return tokPos; } }
        
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            int yyline { get { return tokLin; } }
        
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            int yycol { get { return tokCol; } }

            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
            public string yytext
            {
                get 
                {
                    if (tokTxt == null) 
                        tokTxt = buffer.GetString(tokPos, tokEPos);
                    return tokTxt;
                }
            }

            /// <summary>
            /// Discards all but the first "n" codepoints in the recognized pattern.
            /// Resets the buffer position so that only n codepoints have been consumed;
            /// yytext is also re-evaluated. 
            /// </summary>
            /// <param name="n">The number of codepoints to consume</param>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            void yyless(int n)
            {
                buffer.Pos = tokPos;
                // Must read at least one char, so set before start.
                cCol = tokCol - 1; 
                GetCode();
                // Now ensure that line counting is correct.
                lNum = tokLin;
                // And count the rest of the text.
                for (int i = 0; i < n; ++i) GetCode();
                MarkEnd();
            }
       
            //
            //  It would be nice to count backward in the text
            //  but it does not seem possible to re-establish
            //  the correct column counts except by going forward.
            //
            /// <summary>
            /// Removes the last "n" code points from the pattern.
            /// </summary>
            /// <param name="n">The number to remove</param>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            void _yytrunc(int n) { yyless(yyleng - n); }
        
            //
            // This is painful, but we no longer count
            // codepoints.  For the overwhelming majority 
            // of cases the single line code is fast, for
            // the others, well, at least it is all in the
            // buffer so no files are touched. Note that we
            // can't use (tokEPos - tokPos) because of the
            // possibility of surrogate pairs in the token.
            //
            /// <summary>
            /// The length of the pattern in codepoints (not the same as 
            /// string-length if the pattern contains any surrogate pairs).
            /// </summary>
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
            public int yyleng
            {
                get {
                    if (tokELin == tokLin)
                        return tokECol - tokCol;
                    else
                    {
                        int ch;
                        int count = 0;
                        int save = buffer.Pos;
                        buffer.Pos = tokPos;
                        do {
                            ch = buffer.Read();
                            if (!char.IsHighSurrogate((char)ch)) ++count;
                        } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                        buffer.Pos = save;
                        return count;
                    }
                }
            }
        
            // ============ methods available in actions ==============

            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            internal int YY_START {
                get { return currentScOrd; }
                set { currentScOrd = value; 
                      currentStart = startState[value]; 
                } 
            }
        
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            internal void BEGIN(int next) {
                currentScOrd = next;
                currentStart = startState[next];
            }

            // ============== The main tokenizer code =================

            int Scan() {
                    for (; ; ) {
                        int next;              // next state to enter
                        if(null!=anchorState) {
                            for (;;) {
                                // Discard characters that do not start any pattern.
                                // Must check the left anchor condition after *every* GetCode!
                                state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                                if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                                GetCode();
                            }
                    
                        } else {
                            state = currentStart;
                            while ((next = NextState()) == goStart) {
                                // At this point, the current character has no
                                // transition from the current state.  We discard 
                                // the "no-match" char.   In traditional LEX such 
                                // characters are echoed to the console.
                                GetCode();
                            }
                        }

                        // At last, a valid transition ...    
                        MarkToken();
                        state = next;
                        GetCode();                    
#if BACKUP
                        bool contextSaved = false;
                        while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                            if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                                // Store data for the *latest* accept state that was found.
                                SaveStateAndPos( ref ctx );
                                contextSaved = true;
                            }
                            state = next;
                            GetCode();
                        }
                        if (state > maxAccept && contextSaved)
                            RestoreStateAndPos( ref ctx );
#else  // BACKUP
                        while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                             state = next;
                             GetCode();
                        }
#endif // BACKUP
                        if (state <= maxAccept) {
                            MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            return -2;
            break;
        case 1: // Recognized .,	Shortest string "\u0660"
        case 2: // Recognized .,	Shortest string "@"
        case 17: // Recognized .,	Shortest string "\""
        case 18: // Recognized .,	Shortest string "'"
        case 39: // Recognized .,	Shortest string ":"
return -1;
            break;
        case 3: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "G"
        case 4: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "o"
        case 5: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "u"
        case 6: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "t"
        case 7: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "r"
        case 8: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "f"
        case 9: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "d"
        case 10: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "l"
        case 11: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "n"
        case 12: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "g"
        case 13: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "b"
        case 14: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "s"
        case 15: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "i"
        case 16: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "c"
        case 86: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ch"
        case 87: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "cha"
        case 89: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "in"
        case 91: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "st"
        case 92: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "sb"
        case 93: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "sh"
        case 94: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "sho"
        case 95: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "shor"
        case 97: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "sby"
        case 98: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "sbyt"
        case 100: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "str"
        case 101: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "stri"
        case 102: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "strin"
        case 104: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "bo"
        case 105: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "by"
        case 106: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ba"
        case 107: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "bas"
        case 109: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "byt"
        case 111: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "boo"
        case 113: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "gl"
        case 114: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "glo"
        case 115: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "glob"
        case 116: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "globa"
        case 118: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "nu"
        case 119: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ne"
        case 121: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "nul"
        case 123: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "lo"
        case 124: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "lon"
        case 126: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "do"
        case 127: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "de"
        case 128: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "def"
        case 129: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "dec"
        case 130: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "deci"
        case 131: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "decim"
        case 132: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "decima"
        case 134: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "defa"
        case 135: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "defau"
        case 136: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "defaul"
        case 138: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "dou"
        case 139: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "doub"
        case 140: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "doubl"
        case 142: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "fa"
        case 143: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "fl"
        case 144: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "flo"
        case 145: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "floa"
        case 147: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "fal"
        case 148: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "tru"
        case 150: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "re"
        case 152: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "tr"
        case 153: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ty"
        case 154: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "th"
        case 155: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "thi"
        case 157: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "typ"
        case 158: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "type"
        case 159: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "typeo"
        case 161: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ul"
        case 162: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "us"
        case 163: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ui"
        case 164: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "uin"
        case 166: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ush"
        case 167: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "usho"
        case 168: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ushor"
        case 170: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ulo"
        case 171: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ulon"
        case 173: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ou"
        case 174: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "ob"
        case 175: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "obj"
        case 176: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "obje"
        case 177: // Recognized '[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "objec"
 return 69;
            break;
        case 19: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0"
        case 20: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "1"
        case 63: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0u"
        case 64: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0l"
        case 65: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0ul"
        case 66: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xe"
        case 67: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xee"
        case 68: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeee"
        case 69: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeee"
        case 70: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeee"
        case 71: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeee"
        case 72: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeee"
        case 73: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeee"
        case 74: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeee"
        case 75: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeee"
        case 76: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeee"
        case 77: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeee"
        case 78: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeee"
        case 79: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeeee"
        case 80: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeeeee"
        case 81: // Recognized '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?',	Shortest string "0xeeeeeeeeeeeeeeee"
 return 64;
            break;
        case 21: // Recognized "<",	Shortest string "<"
 return 30;
            break;
        case 22: // Recognized "=",	Shortest string "="
 return 35;
            break;
        case 23: // Recognized ">",	Shortest string ">"
 return 32;
            break;
        case 24: // Recognized "!",	Shortest string "!"
 return 54;
            break;
        case 25: // Recognized "+",	Shortest string "+"
 return 38;
            break;
        case 26: // Recognized "-",	Shortest string "-"
 return 41;
            break;
        case 27: // Recognized "*",	Shortest string "*"
 return 43;
            break;
        case 28: // Recognized "/",	Shortest string "/"
 return 45;
            break;
        case 29: // Recognized "%",	Shortest string "%"
 return 47;
            break;
        case 30: // Recognized "&",	Shortest string "&"
 return 50;
            break;
        case 31: // Recognized "|",	Shortest string "|"
 return 53;
            break;
        case 32: // Recognized "[",	Shortest string "["
 return 55;
            break;
        case 33: // Recognized "]",	Shortest string "]"
 return 56;
            break;
        case 34: // Recognized "(",	Shortest string "("
 return 57;
            break;
        case 35: // Recognized ")",	Shortest string ")"
 return 58;
            break;
        case 36: // Recognized "{",	Shortest string "{"
 return 59;
            break;
        case 37: // Recognized "}",	Shortest string "}"
 return 60;
            break;
        case 38: // Recognized ",",	Shortest string ","
 return 61;
            break;
        case 40: // Recognized ".",	Shortest string "."
 return 63;
            break;
        case 41: // Recognized '[ \t\r\n\v\f]+',	Shortest string "\n"

            break;
        case 42: // Recognized '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string ".0"
        case 43: // Recognized '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string "0f"
        case 44: // Recognized '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)',	Shortest string "0e0"
 return 65;
            break;
        case 45: // Recognized "::",	Shortest string "::"
 return 62;
            break;
        case 46: // Recognized "|=",	Shortest string "|="
 return 52;
            break;
        case 47: // Recognized "||",	Shortest string "||"
 return 51;
            break;
        case 48: // Recognized "&=",	Shortest string "&="
 return 49;
            break;
        case 49: // Recognized "&&",	Shortest string "&&"
 return 48;
            break;
        case 50: // Recognized "%=",	Shortest string "%="
 return 46;
            break;
        case 51: // Recognized "/=",	Shortest string "/="
 return 44;
            break;
        case 52: // Recognized "/*",	Shortest string "/*"
if(!_TryReadUntilBlockEnd("*/")) return -1;
            break;
        case 53: // Recognized '\/\/[^\n]*',	Shortest string "//"

            break;
        case 54: // Recognized "*=",	Shortest string "*="
 return 42;
            break;
        case 55: // Recognized "-=",	Shortest string "-="
 return 40;
            break;
        case 56: // Recognized "--",	Shortest string "--"
 return 39;
            break;
        case 57: // Recognized "+=",	Shortest string "+="
 return 37;
            break;
        case 58: // Recognized "++",	Shortest string "++"
 return 36;
            break;
        case 59: // Recognized "!=",	Shortest string "!="
 return 34;
            break;
        case 60: // Recognized ">=",	Shortest string ">="
 return 31;
            break;
        case 61: // Recognized "==",	Shortest string "=="
 return 33;
            break;
        case 62: // Recognized "<=",	Shortest string "<="
 return 29;
            break;
        case 82: // Recognized '[\'](\\([\\"\'abfnrtv0]|[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})|[^\'])[\']',	Shortest string "'\\'"
        case 83: // Recognized '[\'](\\([\\"\'abfnrtv0]|[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})|[^\'])[\']',	Shortest string "'@'"
 return 28;
            break;
        case 84: // Recognized '"(\\([\\"\'abfnrtv0]|[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})|[^"])*"',	Shortest string "\"\""
        case 85: // Recognized '"(\\([\\"\'abfnrtv0]|[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})|[^"])*"',	Shortest string "\"\\\""
 return 27;
            break;
        case 88: // Recognized "char",	Shortest string "char"
 return 9;
            break;
        case 90: // Recognized "int",	Shortest string "int"
 return 17;
            break;
        case 96: // Recognized "short",	Shortest string "short"
 return 15;
            break;
        case 99: // Recognized "sbyte",	Shortest string "sbyte"
 return 13;
            break;
        case 103: // Recognized "string",	Shortest string "string"
 return 7;
            break;
        case 108: // Recognized "base",	Shortest string "base"
 return 25;
            break;
        case 110: // Recognized "byte",	Shortest string "byte"
 return 14;
            break;
        case 112: // Recognized "bool",	Shortest string "bool"
 return 8;
            break;
        case 117: // Recognized "global",	Shortest string "global"
 return 6;
            break;
        case 120: // Recognized "new",	Shortest string "new"
 return 5;
            break;
        case 122: // Recognized "null",	Shortest string "null"
 return 23;
            break;
        case 125: // Recognized "long",	Shortest string "long"
 return 19;
            break;
        case 133: // Recognized "decimal",	Shortest string "decimal"
 return 12;
            break;
        case 137: // Recognized "default",	Shortest string "default"
 return 4;
            break;
        case 141: // Recognized "double",	Shortest string "double"
 return 11;
            break;
        case 146: // Recognized "float",	Shortest string "float"
 return 10;
            break;
        case 149: // Recognized 'true|false',	Shortest string "true"
 return 22;
            break;
        case 151: // Recognized "ref",	Shortest string "ref"
 return 2;
            break;
        case 156: // Recognized "this",	Shortest string "this"
 return 24;
            break;
        case 160: // Recognized "typeof",	Shortest string "typeof"
 return 3;
            break;
        case 165: // Recognized "uint",	Shortest string "uint"
 return 18;
            break;
        case 169: // Recognized "ushort",	Shortest string "ushort"
 return 16;
            break;
        case 172: // Recognized "ulong",	Shortest string "ulong"
 return 20;
            break;
        case 178: // Recognized "object",	Shortest string "object"
 return 21;
            break;
        case 179: // Recognized "out",	Shortest string "out"
 return 1;
            break;
        case 180: // Recognized '@[_[:IsLetter:]][_[:IsLetterOrDigit:]]*',	Shortest string "@G"
 return 0;
            break;
        case 181: // Recognized '@"([^"]|"")*"',	Shortest string "@\"\""
 return 26;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                        }
                    }
            }

#if BACKUP
            void SaveStateAndPos(ref Context ctx) {
                ctx.bPos  = buffer.Pos;
                ctx.rPos  = readPos;
                ctx.cCol  = cCol;
                ctx.lNum  = lNum;
                ctx.state = state;
                ctx.cChr  = code;
            }

            void RestoreStateAndPos(ref Context ctx) {
                buffer.Pos = ctx.bPos;
                readPos = ctx.rPos;
                cCol  = ctx.cCol;
                lNum  = ctx.lNum;
                state = ctx.state;
                code  = ctx.cChr;
            }
#endif  // BACKUP


            // ============= End of the tokenizer code ================


#if STACK        
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            internal void yy_clear_stack() { scStack.Clear(); }
        
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            internal int yy_top_state() { return scStack.Peek(); }
        
            internal void yy_push_state(int state)
            {
                scStack.Push(currentScOrd);
                BEGIN(state);
            }
        
            internal void yy_pop_state()
            {
                // Protect against input errors that pop too far ...
                if (scStack.Count > 0) {
				    int newSc = scStack.Pop();
				    BEGIN(newSc);
                } // Otherwise leave stack unchanged.
            }
#endif // STACK

            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
            internal void ECHO() { Console.Out.Write(yytext); }
        
        } // end class $Scanner
    } // end class $Tokenizer

}
